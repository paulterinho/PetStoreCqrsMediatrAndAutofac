# ______    _     _____ _                 
# | ___ \  | |   /  ___| |                
# | |_/ /__| |_  \ `--.| |_ ___  _ __ ___ 
# |  __/ _ \ __|  `--. \ __/ _ \| '__/ _ \
# | | |  __/ |_  /\__/ / || (_) | | |  __/
# \_|  \___|\__| \____/ \__\___/|_|  \___|
#                                         
                                       
openapi: "3.0.0"
info:
  version: 1.0.0
  title: CQRS Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - query
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: createPet
      tags:
        - command
      requestBody:
        description: A Pet object we wish to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - query
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    
    PetStoreErrorValue:
      description: List of all errors you'll encounter with PetStore
      type: string
      enum:
        - Could not create a Pet
        - Pet cannot be null
    
    PetType:
      description: Type of Pet
      type: string
      enum:
        - Cat
        - Dog
        - Sloth
        - Monkey
        - Goat
        - Bat
        - Rock
    
    Pet:
      type: object
      required:
        - resourceID
        - name
        - type
      properties:
        resourceID:
          description: Resource ID. Unique and readonly.
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        type:
          $ref: "#/components/schemas/PetType"
    
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string


# APPENDIX:
#
# ASCI Font URL: https://patorjk.com/software/taag/#p=display&f=Doom&t=Test
#