# ______    _     _____ _                 
# | ___ \  | |   /  ___| |                
# | |_/ /__| |_  \ `--.| |_ ___  _ __ ___ 
# |  __/ _ \ __|  `--. \ __/ _ \| '__/ _ \
# | | |  __/ |_  /\__/ / || (_) | | |  __/
# \_|  \___|\__| \____/ \__\___/|_|  \___|
#                                         
                                       
openapi: "3.0.0"
info:
  version: 1.0.0
  title: CQRS Petstore
  description: An example project used to show a CQRS implementation that highlights the utility of using Mediatr & Autofac's IOC container.
  license:
    name: MIT
servers:
  - url: https://localhost:44321/API #this will change.
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - query
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/Pets"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetStoreError"
    post:
      summary: Create a pet
      operationId: createPet
      tags:
        - command
      requestBody:
        description: A Pet object we wish to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Updated pet object. The ResourceID should be updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetStoreError"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - query
      parameters:
        - name: petId
          in: path
          required: true
          description: The id of the pet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetStoreError"
components:
  schemas:
    
    PetStoreErrorValue:
      description: List of all errors you'll encounter with PetStore
      type: string
      enum:
        - Could not create a Pet
        - Pet cannot be null
        - Pet cannot be found
        - Pet ID is not unique
        - Pet Type has an invalid value
        - Pet Type is required
        - Pet Resource IDs do not match
        - Pet Resource ID must be 00000000-0000-0000-0000-000000000000 when creating a Pet
        - PetStore has the following validation errors

    PetTypeValue:
      description: Type of Pet
      type: string
      enum:
        - Cat
        - Dog
        - Sloth
        - Monkey
        - Goat
        - Bat
        - Rock
    
    Pet:
      type: object
      required:
        - resourceID
        - name
        - type
      properties:
        resourceID:
          description: Resource ID. Unique and readonly.
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        type:
          $ref: "#/components/schemas/PetTypeValue"
    
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    
    PetStoreError:
      description: This object is how we are communicating validation errors to the front end.  
      type: object
      properties:
        code:
          $ref: '#/components/schemas/PetStoreErrorValue'
          description: Internal error code
        message:
          type: string
        errors:             # NOTE: The following is a declaration of an IDictionary (an Associative Array). Looks like it's not, but it is.
          type: object
          description: A dictionary of error messages for specific fields. The keys will be the IDs of html elements that had errors. 
          additionalProperties:
            $ref: '#/components/schemas/PetStoreErrorValue'


# APPENDIX:
#
# ASCI Font URL: https://patorjk.com/software/taag/#p=display&f=Doom&t=Test
#