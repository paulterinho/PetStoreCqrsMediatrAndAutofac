{
  "runtime": "NetCore31",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "# ______    _     _____ _                 \r\n# | ___ \\  | |   /  ___| |                \r\n# | |_/ /__| |_  \\ `--.| |_ ___  _ __ ___ \r\n# |  __/ _ \\ __|  `--. \\ __/ _ \\| '__/ _ \\\r\n# | | |  __/ |_  /\\__/ / || (_) | | |  __/\r\n# \\_|  \\___|\\__| \\____/ \\__\\___/|_|  \\___|\r\n#                                         \r\n                                       \r\nopenapi: \"3.0.0\"\r\ninfo:\r\n  version: 1.0.0\r\n  title: CQRS Petstore\r\n  description: An example project used to show a CQRS implementation that highlights the utility of using Mediatr & Autofac's IOC container.\r\n  license:\r\n    name: MIT\r\nservers:\r\n  - url: https://localhost:44321/API #this will change.\r\npaths:\r\n  /pets:\r\n    get:\r\n      summary: List all pets\r\n      operationId: listPets\r\n      tags:\r\n        - query\r\n      parameters:\r\n        - name: limit\r\n          in: query\r\n          description: How many items to return at one time (max 100)\r\n          required: false\r\n          schema:\r\n            type: integer\r\n            format: int32\r\n      responses:\r\n        '200':\r\n          description: A paged array of pets\r\n          headers:\r\n            x-next:\r\n              description: A link to the next page of responses\r\n              schema:\r\n                type: string\r\n          content:\r\n            application/json:    \r\n              schema:\r\n                $ref: \"#/components/schemas/Pets\"\r\n        default:\r\n          description: unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/PetStoreError\"\r\n    post:\r\n      summary: Create a pet\r\n      operationId: createPet\r\n      tags:\r\n        - command\r\n      requestBody:\r\n        description: A Pet object we wish to create\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              $ref: '#/components/schemas/Pet'\r\n      responses:\r\n        '200':\r\n          description: Updated pet object. The ResourceID should be updated.\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/Pet\"\r\n        default:\r\n          description: unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/PetStoreError\"\r\n  /pets/{petId}:\r\n    get:\r\n      summary: Info for a specific pet\r\n      operationId: showPetById\r\n      tags:\r\n        - query\r\n      parameters:\r\n        - name: petId\r\n          in: path\r\n          required: true\r\n          description: The id of the pet to retrieve\r\n          schema:\r\n            type: string\r\n      responses:\r\n        '200':\r\n          description: Expected response to a valid request\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/Pet\"\r\n        default:\r\n          description: unexpected error\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: \"#/components/schemas/PetStoreError\"\r\ncomponents:\r\n  schemas:\r\n    \r\n    PetStoreErrorValue:\r\n      description: List of all errors you'll encounter with PetStore\r\n      type: string\r\n      enum:\r\n        - Could not create a Pet\r\n        - Pet cannot be null\r\n        - Pet cannot be found\r\n        - Pet ID is not unique\r\n        - Pet Type has an invalid value\r\n        - Pet Type is required\r\n        - Pet Resource IDs do not match\r\n    \r\n    PetTypeValue:\r\n      description: Type of Pet\r\n      type: string\r\n      enum:\r\n        - Cat\r\n        - Dog\r\n        - Sloth\r\n        - Monkey\r\n        - Goat\r\n        - Bat\r\n        - Rock\r\n    \r\n    Pet:\r\n      type: object\r\n      required:\r\n        - resourceID\r\n        - name\r\n        - type\r\n      properties:\r\n        resourceID:\r\n          description: Resource ID. Unique and readonly.\r\n          type: string\r\n          format: uuid\r\n          readOnly: true\r\n        name:\r\n          type: string\r\n        type:\r\n          $ref: \"#/components/schemas/PetTypeValue\"\r\n    \r\n    Pets:\r\n      type: array\r\n      items:\r\n        $ref: \"#/components/schemas/Pet\"\r\n    \r\n    PetStoreError:\r\n      description: This object is how we are communicating validation errors to the front end.  \r\n      type: object\r\n      properties:\r\n        code:\r\n          $ref: '#/components/schemas/PetStoreErrorValue'\r\n          description: Internal error code\r\n        message:\r\n          type: string\r\n        errors:             # NOTE: The following is a declaration of an IDictionary (an Associative Array). Looks like it's not, but it is.\r\n          type: object\r\n          description: A dictionary of error messages for specific fields. The keys will be the IDs of html elements that had errors. \r\n          additionalProperties:\r\n            $ref: '#/components/schemas/PetStoreErrorValue'\r\n\r\n\r\n# APPENDIX:\r\n#\r\n# ASCI Font URL: https://patorjk.com/software/taag/#p=display&f=Doom&t=Test\r\n#",
      "url": "http://redocly.github.io/redoc/openapi.yaml",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpClient": {
      "clientBaseClass": null,
      "configurationClass": null,
      "generateClientClasses": true,
      "generateClientInterfaces": true,
      "clientBaseInterface": null,
      "injectHttpClient": false,
      "disposeHttpClient": false,
      "protectedMethods": [],
      "generateExceptionClasses": true,
      "exceptionClass": "ApiException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": false,
      "generatePrepareRequestAndProcessResponseAsAsyncMethods": false,
      "exposeJsonSerializerSettings": false,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "{controller}Client",
      "operationGenerationMode": "MultipleClientsFromOperationId",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": false,
      "generateJsonMethods": true,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "Petstore.Swagger.Io.Common.Query",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "NewtonsoftJson",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": true,
      "generateNullableReferenceTypes": true,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "checksumCacheEnabled": false,
      "serviceHost": null,
      "serviceSchemes": [],
      "output": "../Controllers/Query/QueryController.GENERATED.cs",
      "newLineBehavior": "Auto"
    },
    "openApiToCSharpController": {
      "controllerBaseClass": null,
      "controllerStyle": "Abstract",
      "controllerTarget": "AspNetCore",
      "useCancellationToken": true,
      "useActionResultType": true,
      "generateModelValidationAttributes": true,
      "routeNamingStrategy": "None",
      "basePath": null,
      "className": "{controller}",
      "operationGenerationMode": "MultipleClientsFromFirstTagAndOperationId",
      "additionalNamespaceUsages": [
        "System.Linq"
      ],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": false,
      "generateJsonMethods": true,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "Petstore.Swagger.Io.Common.Command",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.List",
      "arrayInstanceType": "System.Collections.Generic.List",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "NewtonsoftJson",
      "generateDefaultValues": false,
      "generateDataAnnotations": false,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "checksumCacheEnabled": false,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "../Controllers/Command/CommandController.GENERATED.cs",
      "newLineBehavior": "Auto"
    }
  }
}